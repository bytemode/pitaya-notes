// Code generated by MockGen. DO NOT EDIT.
// Source: ./metrics/reporter_interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReporter is a mock of Reporter interface
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *MockReporterMockRecorder
}

// MockReporterMockRecorder is the mock recorder for MockReporter
type MockReporterMockRecorder struct {
	mock *MockReporter
}

// NewMockReporter creates a new mock instance
func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &MockReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReporter) EXPECT() *MockReporterMockRecorder {
	return m.recorder
}

// ReportCount mocks base method
func (m *MockReporter) ReportCount(metric string, tags map[string]string, count float64) error {
	ret := m.ctrl.Call(m, "ReportCount", metric, tags, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportCount indicates an expected call of ReportCount
func (mr *MockReporterMockRecorder) ReportCount(metric, tags, count interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportCount", reflect.TypeOf((*MockReporter)(nil).ReportCount), metric, tags, count)
}

// ReportSummary mocks base method
func (m *MockReporter) ReportSummary(metric string, tags map[string]string, value float64) error {
	ret := m.ctrl.Call(m, "ReportSummary", metric, tags, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportSummary indicates an expected call of ReportSummary
func (mr *MockReporterMockRecorder) ReportSummary(metric, tags, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSummary", reflect.TypeOf((*MockReporter)(nil).ReportSummary), metric, tags, value)
}

// ReportGauge mocks base method
func (m *MockReporter) ReportGauge(metric string, tags map[string]string, value float64) error {
	ret := m.ctrl.Call(m, "ReportGauge", metric, tags, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportGauge indicates an expected call of ReportGauge
func (mr *MockReporterMockRecorder) ReportGauge(metric, tags, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportGauge", reflect.TypeOf((*MockReporter)(nil).ReportGauge), metric, tags, value)
}
